function params = get_params()
    %% initialize structure
    params = struct();
    
    %% Create UI figure for user inputs
    fig = uifigure('Name', 'Session Parameters', 'Position', [100 100 400 400]);
    
    % Default values
    default_time  = '0';
    default_delay = '0';
    default_fs    = '1000';
    default_name  = 'session';
    default_id    = 'mouse_id';
    params.calibration_folder = '';

    % Labels and Fields
    uilabel(fig, 'Position', [20 340 100 22], 'Text', 'Mouse ID (s):');
    id_field = uieditfield(fig, 'text', 'Position', [150 340 200 22], 'Value', default_id);

    uilabel(fig, 'Position', [20 300 100 22], 'Text', 'Session name:');
    name_field = uieditfield(fig, 'text', 'Position', [150 300 200 22], 'Value', default_name);
    
    uilabel(fig, 'Position', [20 260 120 22], 'Text', 'Sampling rate (Hz):');
    fs_field = uieditfield(fig, 'text', 'Position', [150 260 200 22], 'Value', default_fs);
    
    uilabel(fig, 'Position', [20 220 120 22], 'Text', 'Session length (h):');
    time_field = uieditfield(fig, 'text', 'Position', [150 220 200 22], 'Value', default_time);
    
    uilabel(fig, 'Position', [20 180 120 22], 'Text', 'Start delay (h):');
    delay_field = uieditfield(fig, 'text', 'Position', [150 180 200 22], 'Value', default_delay);
    
    uilabel(fig, 'Position', [20 140 120 22], 'Text', 'Output terminal ID:');
    ttl_field = uidropdown(fig, ...
        'Items', {'ao0','ao1'}, ...
        'Position', [150 140 200 22]);
    
    uilabel(fig, 'Position', [20 100 120 22], 'Text', 'Box ID (1-4):');
    box_field = uidropdown(fig, ...
        'Items', {'1','2','3','4'}, ...
        'Position', [150 100 200 22]);
    
    % Label for showing selected folder path
    path_label = uilabel(fig, ...
        'Text', 'No folder selected', ...
        'Position', [20 100 360 22], ...
        'FontAngle', 'italic', ...
        'HorizontalAlignment', 'left');

    % Buttons
    folder_btn = uibutton(fig, 'Text', 'Select Folder', ...
        'Position', [60 60 100 30], ...
        'ButtonPushedFcn', @(btn,event) select_folder(path_label)); %#ok<*NASGU> 

    str_btn = uibutton(fig, 'Text', 'Start', ...
        'Position', [200 60 100 30], ...
        'ButtonPushedFcn', @(btn,event) uiresume(fig));
    
    % Store initial params in appdata
    setappdata(fig, 'params', params);
    
    % Wait until user presses "Start"
    uiwait(fig);
    
    % Retrieve updated params
    params = getappdata(fig, 'params');
    
    % Collect input values from fields
    params.session_name = char(name_field.Value);
    params.dur    = str2double(time_field.Value)  * 3600;
    params.delay  = str2double(delay_field.Value) * 3600;
    params.fs     = str2double(fs_field.Value);
    params.ttl_id = ttl_field.Value;
    box_id        = str2double(box_field.Value);
    
    % Close the UI
    close(fig);
    
    %% Core signal processing/DAQ parameters
    % NIDAQ ID
    params.daq_id = 'Dev1';
    
    % comment
    params.nyq = params.fs / 2;
    params.aq_dur = 1;
    params.epoch  = 5;
    params.buffer = round(params.fs * params.aq_dur);
    
    % define things EEG filters
    params.delta_frq = [0.5, 4];
    params.theta_frq = [5, 10];
    params.eeg_low   = 0.5;
    params.eeg_high  = 50;
    params.emg_low   = 30;
    params.emg_high  = 100;
    params.ord       = 4;
    
    % ttl duration
    params.ttl_dur = 0.1;
    
    % define thing for EMG filter
    params.ord_comb = 50;
    params.fo = 60;
    params.q  = 35;
    params.bw = (params.fo / params.nyq) / params.q;
    
    % set up filters
    [params.b_eeg,  params.a_eeg]  = butter(params.ord, [params.eeg_low, params.eeg_high] / params.nyq, 'bandpass');
    [params.b_comb, params.a_comb] = iircomb(params.ord_comb, params.bw, 'notch');
    
    % EEG/EMG channel assignment
    switch box_id
        case 1
            params.eeg_id = 'ai0';  params.emg_id = 'ai1';
        case 2
            params.eeg_id = 'ai2';  params.emg_id = 'ai3';
        case 3
            params.eeg_id = 'ai8';  params.emg_id = 'ai9';
        case 4
            params.eeg_id = 'ai10'; params.emg_id = 'ai11';
        otherwise
            error('Invalid Box ID');
    end
    
    % Optional delay
    if params.delay > 0
        fprintf('\n -- Delaying recording for %d hours. -- \n', params.delay / 3600);
        pause(params.delay)
    end
end

%% Nested function to select folder and update params in appdata
function select_folder(path_label)
    folder = uigetdir;
    if folder ~= 0
        fig = path_label.Parent;
        params = getappdata(fig, 'params');   % get current params
        params.calibration_folder = folder;   % update folder
        setappdata(fig, 'params', params);    % save updated params
        
        % Show truncated path in label
        truncated = truncate_path(folder, 50);
        path_label.Text = truncated;
        
        % Bring UI figure back to front and refresh
        figure(fig);
        drawnow;
    else
        disp('Folder selection cancelled.');
    end
end

%% Helper function to truncate long paths for display
function truncated = truncate_path(path_str, max_chars)
    if strlength(path_str) > max_chars
        truncated = "..." + extractAfter(path_str, strlength(path_str) - max_chars + 3);
    else
        truncated = path_str;
    end
end
